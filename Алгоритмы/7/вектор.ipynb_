{"nbformat":4,"nbformat_minor":0,"metadata":{"anaconda-cloud":{},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"Копия блокнота \"vector_operations.ipynb\"","provenance":[{"file_id":"1IwTR-03Uhe6amO3BqyfLCgWcOSWJcPG4","timestamp":1608947169644}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"d7BgXGPjuWbH"},"source":["# `NumPy`: векторы и операции над ними (Версия для Python 3)\n","---"]},{"cell_type":"markdown","metadata":{"id":"O4KgXyPquWbM"},"source":["В этом ноутбуке нам понадобятся библиотека `NumPy`. Для удобства импортируем ее под более коротким именем:"]},{"cell_type":"code","metadata":{"id":"yOkvukPHuWbN"},"source":["import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"K_TKEgFYuWbN"},"source":["## 1. Создание векторов"]},{"cell_type":"markdown","metadata":{"id":"wG_u2cxyuWbN"},"source":["Самый простой способ создать вектор в `NumPy` — задать его явно с помощью __`numpy.array(list, dtype=None, ...)`__.\n","\n","Параметр __`list`__ задает итерируемый объект, из которого можно создать вектор. Например, в качестве этого параметра можно задать список чисел. Параметр __`dtype`__ задает тип значений вектора, например, __`float`__ — для вещественных значений и __`int`__ — для целочисленных. Если этот параметр не задан, то тип данных будет определен из типа элементов первого аргумента. "]},{"cell_type":"code","metadata":{"id":"_PD1cA0XuWbO","outputId":"4ccb0a4a-cf52-477a-c71d-3a9b1a3b4af2"},"source":["a = np.array([1, 2, 3, 4])\n","print('Вектор:\\n', a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор:\n"," [1 2 3 4]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iADVDB5EuWbO","outputId":"b71568fb-19c5-492c-f8eb-7005144c9733"},"source":["b = np.array([1, 2, 3, 4, 5], dtype=float)\n","print('Вещественный вектор:\\n', b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вещественный вектор:\n"," [1. 2. 3. 4. 5.]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"seX7BsdyuWbP","outputId":"8763d565-ecca-423b-894c-40a0191d55bd"},"source":["c = np.array([True, False, True], dtype=bool)\n","print('Булевский вектор:\\n', c)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Булевский вектор:\n"," [ True False  True]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5V0rMBZFuWbP"},"source":["Тип значений вектора можно узнать с помощью __`numpy.ndarray.dtype`__:"]},{"cell_type":"code","metadata":{"id":"H78Rc6opuWbP","outputId":"c37d61fa-3943-439f-fa85-b1fead7938ec"},"source":["print('Тип булевского вектора:\\n', c.dtype)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Тип булевского вектора:\n"," bool\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UeVRzLL3uWbQ"},"source":["Другим способом задания вектора является функция __`numpy.arange(([start, ]stop, [step, ]...)`__, которая задает последовательность чисел заданного типа из промежутка __[`start`, `stop`)__ через шаг __`step`__:"]},{"cell_type":"code","metadata":{"id":"XggXl0lsuWbQ","outputId":"81e4eb84-1182-496f-f673-fc16365f2623"},"source":["d = np.arange(start=10, stop=20, step=2) # последнее значение не включается!\n","print('Вектор чисел от 10 до 20 с шагом 2:\\n', d)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор чисел от 10 до 20 с шагом 2:\n"," [10 12 14 16 18]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lmWZyQbPuWbQ","outputId":"f6a8cc97-594b-4466-9cbe-3fb56b668753"},"source":["f = np.arange(start=0, stop=1, step=0.3, dtype=float)\n","print('Вещественный вектор чисел от 0 до 1 с шагом 0.3:\\n', f)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вещественный вектор чисел от 0 до 1 с шагом 0.3:\n"," [0.  0.3 0.6 0.9]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZUnZYcuBuWbQ"},"source":["По сути вектор в `NumPy` является одномерным массивом, что соответствует интуитивному определению вектора:"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"UjyfYMF9uWbR","outputId":"2ad487f1-19ec-4222-f9e4-9b2ae7f7c0c9"},"source":["print(c.ndim) # количество размерностей"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y_kbDeowuWbR","outputId":"f1781a88-9cb9-4d0a-bcae-16a3f38890b6"},"source":["print(c.shape) # shape фактически задает длину вектора "],"execution_count":null,"outputs":[{"output_type":"stream","text":["(3,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"K3-Y46SEuWbR"},"source":["__Обратите внимание:__ _вектор _и одномерный массив тождественные понятия в `NumPy`. Помимо этого, также существуют понятия _вектор-столбец_ и _вектор-строка_, которые, несмотря на то что математически задают один и тот же объект, являются двумерными массивами и имеют другое значение поля __`shape`__ (в этом случае поле состоит из двух чисел, одно из которых равно единице). Эти тонкости будут рассмотрены в следующем уроке."]},{"cell_type":"markdown","metadata":{"id":"mnVq2elPuWbR"},"source":["Более подробно о том, как создавать векторы в `NumPy`, \n","см. [документацию](http://docs.scipy.org/doc/numpy-1.10.1/user/basics.creation.html)."]},{"cell_type":"markdown","metadata":{"id":"0nNlZwH0uWbS"},"source":["## 2. Операции над векторами"]},{"cell_type":"markdown","metadata":{"id":"1xhgsNeduWbS"},"source":["Векторы в `NumPy` можно складывать, вычитать, умножать на число и умножать на другой вектор (покоординатно):"]},{"cell_type":"code","metadata":{"id":"vAMSfm5kuWbS","outputId":"2a6d023a-87f5-457a-b2e4-1b55f1d77992"},"source":["a = np.array([1, 2, 3])\n","b = np.array([6, 5, 4])\n","k = 2\n","\n","print('Вектор a:', a)\n","print('Вектор b:', b)\n","print('Число k:', k)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор a: [1 2 3]\n","Вектор b: [6 5 4]\n","Число k: 2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"97dNYuThuWbS","outputId":"281f6613-a947-4ee2-fca1-0b0a8c95c86f"},"source":["print('Сумма a и b:\\n', a + b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Сумма a и b:\n"," [7 7 7]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"L9FA_g0DuWbS","outputId":"d5fa9093-2b55-4826-cc74-b954ff82a8e4"},"source":["print('Разность a и b:\\n', a - b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Разность a и b:\n"," [-5 -3 -1]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7G3oarw8uWbT","outputId":"cd2091d1-6cea-4eef-b9d0-8a232087eac4"},"source":["print('Покоординатное умножение a и b:\\n', a * b )"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Покоординатное умножение a и b:\n"," [ 6 10 12]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"R2L5SUUmuWbT","outputId":"02a911ac-1ddf-4625-9c3f-a6b541211432"},"source":["print('Умножение вектора на число (осуществляется покоординатно):\\n', k * a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Умножение вектора на число (осуществляется покоординатно):\n"," [2 4 6]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vkf0HIfwuWbT"},"source":["## 3. Нормы векторов"]},{"cell_type":"markdown","metadata":{"id":"ETgwUDdYuWbT"},"source":["Вспомним некоторые нормы, которые можно ввести в пространстве $\\mathbb{R}^{n}$, и рассмотрим, с помощью каких библиотек и функций их можно вычислять в `NumPy`."]},{"cell_type":"markdown","metadata":{"id":"2FqztP43uWbT"},"source":["### p-норма"]},{"cell_type":"markdown","metadata":{"id":"_yt7bJWXuWbT"},"source":["p-норма (норма Гёльдера) для вектора $x = (x_{1}, \\dots, x_{n}) \\in \\mathbb{R}^{n}$ вычисляется по формуле:\n","\n","$$\n","\\left\\Vert x \\right\\Vert_{p} = \\left( \\sum_{i=1}^n \\left| x_{i} \\right|^{p} \\right)^{1 / p},~p \\geq 1.\n","$$"]},{"cell_type":"markdown","metadata":{"id":"oaqha5mmuWbU"},"source":["В частных случаях при:\n","* $p = 1$ получаем $\\ell_{1}$ норму\n","* $p = 2$ получаем $\\ell_{2}$ норму"]},{"cell_type":"markdown","metadata":{"id":"5b6sQrovuWbU"},"source":["Далее нам понабится модуль `numpy.linalg`, реализующий некоторые приложения линейной алгебры. Для вычисления различных норм мы используем функцию __`numpy.linalg.norm(x, ord=None, ...)`__, где __`x`__ — исходный вектор, __`ord`__ — параметр, определяющий норму (мы рассмотрим два варианта его значений — 1 и 2). Импортируем эту функцию:"]},{"cell_type":"code","metadata":{"id":"eV5Hl4mHuWbU"},"source":["from numpy.linalg import norm"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bF5UbSNEuWbU"},"source":["### $\\ell_{1}$ норма"]},{"cell_type":"markdown","metadata":{"id":"qiJAhYW8uWbU"},"source":["$\\ell_{1}$ норма \n","(также известная как [манхэттенское расстояние](https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5_%D0%B3%D0%BE%D1%80%D0%BE%D0%B4%D1%81%D0%BA%D0%B8%D1%85_%D0%BA%D0%B2%D0%B0%D1%80%D1%82%D0%B0%D0%BB%D0%BE%D0%B2))\n","для вектора $x = (x_{1}, \\dots, x_{n}) \\in \\mathbb{R}^{n}$ вычисляется по формуле:\n","\n","$$\n"," \\left\\Vert x \\right\\Vert_{1} = \\sum_{i=1}^n \\left| x_{i} \\right|.\n","$$"]},{"cell_type":"markdown","metadata":{"id":"lUUb4F8juWbU"},"source":["Ей в функции __`numpy.linalg.norm(x, ord=None, ...)`__ соответствует параметр __`ord=1`__."]},{"cell_type":"code","metadata":{"id":"4PwK5UhVuWbV","outputId":"06ef5644-f91b-4b69-9623-98f516920bf2"},"source":["a = np.array([1, 2, -3])\n","print('Вектор a:', a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор a: [ 1  2 -3]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"i9pqPdfDuWbV","outputId":"cf195a5f-e548-41d7-ffa0-9857e2468b95"},"source":["print('L1 норма вектора a:\\n', norm(a, ord=1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["L1 норма вектора a:\n"," 6.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nu7ydIiOuWbV"},"source":["### $\\ell_{2}$ норма"]},{"cell_type":"markdown","metadata":{"id":"qiER0cdMuWbV"},"source":["$\\ell_{2}$ норма (также известная как евклидова норма)\n","для вектора $x = (x_{1}, \\dots, x_{n}) \\in \\mathbb{R}^{n}$ вычисляется по формуле:\n","\n","$$\n"," \\left\\Vert x \\right\\Vert_{2} = \\sqrt{\\sum_{i=1}^n \\left( x_{i} \\right)^2}.\n","$$"]},{"cell_type":"markdown","metadata":{"id":"1nKjOBlguWbV"},"source":["Ей в функции __`numpy.linalg.norm(x, ord=None, ...)`__ соответствует параметр __`ord=2`__."]},{"cell_type":"code","metadata":{"id":"WJKSRNUBuWbV","outputId":"2e856d08-f1b0-434c-c79f-d7038fd84de0"},"source":["a = np.array([1, 2, -3])\n","print('Вектор a:', a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор a: [ 1  2 -3]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QpbPK3dGuWbW","outputId":"e67b1c47-aff5-428d-d9ce-510ce839fe26"},"source":["print('L2 норма вектора a:\\n', norm(a, ord=2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["L2 норма вектора a:\n"," 3.7416573867739413\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OjJWNI24uWbW"},"source":["Более подробно о том, какие еще нормы (в том числе матричные) можно вычислить, см. [документацию](http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.linalg.norm.html). "]},{"cell_type":"markdown","metadata":{"id":"OOUOPOSZuWbW"},"source":["## 4. Расстояния между векторами"]},{"cell_type":"markdown","metadata":{"id":"etJl3jCfuWbW"},"source":["Для двух векторов $x = (x_{1}, \\dots, x_{n}) \\in \\mathbb{R}^{n}$ и $y = (y_{1}, \\dots, y_{n}) \\in \\mathbb{R}^{n}$ $\\ell_{1}$ и $\\ell_{2}$ раccтояния вычисляются по следующим формулам соответственно:\n","\n","$$\n"," \\rho_{1}\\left( x, y \\right) = \\left\\Vert x - y \\right\\Vert_{1} = \\sum_{i=1}^n \\left| x_{i} - y_{i} \\right|\n","$$\n","\n","$$\n"," \\rho_{2}\\left( x, y \\right) = \\left\\Vert x - y \\right\\Vert_{2} = \n"," \\sqrt{\\sum_{i=1}^n \\left( x_{i} - y_{i} \\right)^2}.\n","$$"]},{"cell_type":"code","metadata":{"id":"cR4eo7YDuWbW","outputId":"93a7e08f-a620-408f-b3b3-3dfdf73c37fa"},"source":["a = np.array([1, 2, -3])\n","b = np.array([-4, 3, 8])\n","print('Вектор a:', a)\n","print('Вектор b:', b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор a: [ 1  2 -3]\n","Вектор b: [-4  3  8]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"I2CRCId7uWbW","outputId":"aa5dd4b7-bb39-4b99-c925-8bcf467d8c8e"},"source":["print('L1 расстояние между векторами a и b:\\n', norm(a - b, ord=1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["L1 расстояние между векторами a и b:\n"," 17.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RlsNl_nIuWbX","outputId":"1c1524ba-ee69-4582-8191-62358634e008"},"source":["print('L2 расстояние между векторами a и b:\\n', norm(a - b, ord=2))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["L2 расстояние между векторами a и b:\n"," 12.12435565298214\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vMbWs5-HuWbX"},"source":["Также расстояние между векторами можно посчитать с помощью функции __`scipy.spatial.distance.cdist(XA, XB, metric='euclidean', p=2, ...)`__ из модуля `SciPy`, предназначенного для выполнения научных и инженерных расчётов. "]},{"cell_type":"code","metadata":{"id":"0mIXaBwFuWbX"},"source":["from scipy.spatial.distance import cdist"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"76tcGzQzuWbX"},"source":["__`scipy.spatial.distance.cdist(...)`__ требует, чтобы размерность __`XA`__ и __`XB`__ была как минимум двумерная. По этой причине для использования этой функции необходимо преобразовать _векторы_, которые мы рассматриваем в этом ноутбуке, к _вектор-строкам_ с помощью способов, которые мы рассмотрим ниже. "]},{"cell_type":"markdown","metadata":{"id":"0HqH2eOmuWbX"},"source":["Параметры __`XA, XB`__ — исходные вектор-строки, а __`metric`__ и __`p`__ задают метрику расстояния\n","(более подробно о том, какие метрики можно использовать, см. [документацию](http://docs.scipy.org/doc/scipy-0.16.0/reference/generated/scipy.spatial.distance.cdist.html))."]},{"cell_type":"markdown","metadata":{"id":"AEDDjoNtuWbX"},"source":["Первый способ из _вектора_ сделать _вектор-строку (вектор-столбец)_ — это использовать _метод_ __`array.reshape(shape)`__, где параметр __`shape`__ задает размерность вектора (кортеж чисел)."]},{"cell_type":"code","metadata":{"scrolled":true,"id":"eikuvnwOuWbY","outputId":"b0b35ff9-6a74-4a95-b2af-89b6270317c2"},"source":["a = np.array([6, 3, -5])\n","b = np.array([-1, 0, 7])\n","print('Вектор a:', a)\n","print('Его размерность:', a.shape)\n","print('Вектор b:', b)\n","print('Его размерность:', b.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор a: [ 6  3 -5]\n","Его размерность: (3,)\n","Вектор b: [-1  0  7]\n","Его размерность: (3,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QlU6PcABuWbY","outputId":"34d897db-2abf-4a24-bdb4-7ff508e34644"},"source":["a = a.reshape((1, 3))\n","b = b.reshape((1, 3))\n","print('После применения метода reshape:\\n')\n","print('Вектор-строка a:', a)\n","print('Его размерность:', a.shape)\n","print('Вектор-строка b:', b)\n","print('Его размерность:', b.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["После применения метода reshape:\n","\n","Вектор-строка a: [[ 6  3 -5]]\n","Его размерность: (1, 3)\n","Вектор-строка b: [[-1  0  7]]\n","Его размерность: (1, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Bzr8WekluWbY","outputId":"4a79714e-9598-4781-ffee-25aa643a6f97"},"source":["print('Манхэттенское расстояние между a и b (через cdist):', cdist(a, b, metric='cityblock'))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Манхэттенское расстояние между a и b (через cdist): [[22.]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"I0PUi1xhuWbY"},"source":["Заметим, что после применения этого метода размерность полученных вектор-строк будет равна __`shape`__. Следующий метод позволяет сделать такое же преобразование, но не изменяет размерность исходного вектора.  "]},{"cell_type":"markdown","metadata":{"id":"m9H2NLsAuWbY"},"source":["В `NumPy` к размерностям объектов можно добавлять фиктивные оси с помощью __`np.newaxis`__. Для того, чтобы понять, как это сделать, рассмотрим пример:"]},{"cell_type":"code","metadata":{"id":"JVhD4umYuWbZ","outputId":"7e840401-64bb-4da5-8cfa-d9fb90a3667b"},"source":["d = np.array([3, 0, 8, 9, -10])\n","print('Вектор d:', d)\n","print('Его размерность:', d.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор d: [  3   0   8   9 -10]\n","Его размерность: (5,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lffF3eUDuWbZ","outputId":"3717d469-fbf9-4d11-87f6-9852e15de2e0"},"source":["print ('Вектор d с newaxis --> вектор-строка:\\n', d[np.newaxis, :])\n","print ('Полученная размерность:', d[np.newaxis, :].shape)\n","\n","print ('Вектор d с newaxis --> вектор-столбец:\\n', d[:, np.newaxis])\n","print ('Полученная размерность:', d[:, np.newaxis].shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор d с newaxis --> вектор-строка:\n"," [[  3   0   8   9 -10]]\n","Полученная размерность: (1, 5)\n","Вектор d с newaxis --> вектор-столбец:\n"," [[  3]\n"," [  0]\n"," [  8]\n"," [  9]\n"," [-10]]\n","Полученная размерность: (5, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c79zbl9KuWbZ"},"source":["Важно, что __`np.newaxis`__ добавляет к размерности ось, длина которой равна 1 (это и логично, так как количество элементов должно сохраняться). Таким образом, надо вставлять новую ось там, где нужна единица в размерности. "]},{"cell_type":"markdown","metadata":{"id":"vh2Q-sgKuWba"},"source":["Теперь посчитаем расстояния с помощью __`scipy.spatial.distance.cdist(...)`__, используя __`np.newaxis`__ для преобразования векторов:"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Rol_ilxuuWba","outputId":"dbd85b5a-41b7-4347-c80f-cf86d391a1a1"},"source":["a = np.array([6, 3, -5])\n","b = np.array([-1, 0, 7])\n","print ('Евклидово расстояние между a и b (через cdist):', cdist(a[np.newaxis, :], \n","                                                               b[np.newaxis, :], \n","                                                               metric='euclidean'))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Евклидово расстояние между a и b (через cdist): [[14.2126704]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"adwCsI_4uWba"},"source":["Эта функция также позволяет вычислять попарные расстояния между множествами векторов. Например, пусть у нас имеется матрица размера $m_{A} \\times n$. Мы можем рассматривать ее как описание некоторых $m_{A}$ наблюдений в $n$-мерном пространстве. Пусть также имеется еще одна аналогичная матрица размера $m_{B} \\times n$, где  $m_{B}$ векторов в том же $n$-мерном пространстве. Часто необходимо посчитать попарные расстояния между векторами первого и второго множеств. В этом случае можно пользоваться функцией __`scipy.spatial.distance.cdist(XA, XB, metric='euclidean', p=2, ...)`__, где в качестве __`XA, XB`__ необходимо передать две описанные матрицы. Функция возвращает матрицу попарных расстояний размера $m_{A} \\times m_{B}$, где элемент матрицы на $[i, j]$-ой позиции равен расстоянию между $i$-тым вектором первого множества и $j$-ым вектором второго множества. \n","\n","В данном случае эта функция предподчительнее __`numpy.linalg.norm(...)`__, так как она вычисляет попарные расстояния быстрее и эффективнее. "]},{"cell_type":"markdown","metadata":{"id":"wsjkym5_uWba"},"source":["## 5. Скалярное произведение и угол между векторами"]},{"cell_type":"code","metadata":{"id":"3cNbzVL6uWba","outputId":"4433e518-62dd-4811-c506-7016b7360bd4"},"source":["a = np.array([0, 5, -1])\n","b = np.array([-4, 9, 3])\n","print('Вектор a:', a)\n","print('Вектор b:', b)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Вектор a: [ 0  5 -1]\n","Вектор b: [-4  9  3]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9X40CYyVuWbb"},"source":["Скалярное произведение в пространстве $\\mathbb{R}^{n}$ для двух векторов $x = (x_{1}, \\dots, x_{n})$ и $y = (y_{1}, \\dots, y_{n})$ определяется как:\n","\n","$$\n","\\langle x, y \\rangle = \\sum_{i=1}^n x_{i} y_{i}.\n","$$"]},{"cell_type":"markdown","metadata":{"id":"T3g66VvBuWbb"},"source":["Скалярное произведение двух векторов можно вычислять с помощью функции __`numpy.dot(a, b, ...)`__ или _метода_ __`vec1.dot(vec2)`__, где __`vec1`__ и __`vec2`__ — исходные векторы. Также эти функции подходят для матричного умножения, о котором речь пойдет в следующем уроке. "]},{"cell_type":"code","metadata":{"id":"R0Zx5qSTuWbb","outputId":"a4fb4a0a-78b9-4c32-b28c-3e196978970c"},"source":["print('Скалярное произведение a и b (через функцию):', np.dot(a, b))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Скалярное произведение a и b (через функцию): 42\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WxvGBE58uWbb","outputId":"6fef8db7-3220-4de6-d35a-1d2e71c9db38"},"source":["print('Скалярное произведение a и b (через метод):', a.dot(b))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Скалярное произведение a и b (через метод): 42\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fMDzHS8MuWbc"},"source":["Длиной вектора $x = (x_{1}, \\dots, x_{n}) \\in \\mathbb{R}^{n}$ называется квадратный корень из скалярного произведения, то есть длина равна евклидовой норме вектора:\n","\n","$$\n","\\left| x \\right| = \\sqrt{\\langle x, x \\rangle} = \\sqrt{\\sum_{i=1}^n x_{i}^2} =  \\left\\Vert x \\right\\Vert_{2}.\n","$$"]},{"cell_type":"markdown","metadata":{"id":"3hf51shVuWbc"},"source":["Теперь, когда мы знаем расстояние между двумя ненулевыми векторами и их длины, мы можем вычислить угол между ними через скалярное произведение:\n","\n","$$\n","\\langle x, y \\rangle = \\left| x \\right| | y | \\cos(\\alpha)\n","\\implies \\cos(\\alpha) = \\frac{\\langle x, y \\rangle}{\\left|| x |\\right| || y ||},\n","$$\n","\n","где $\\alpha \\in [0, \\pi]$ — угол между векторами $x$ и $y$."]},{"cell_type":"code","metadata":{"id":"XSjtERzVuWbc","outputId":"0d3fa333-aae6-493b-c6a4-ef801d50308c"},"source":["cos_angle = np.dot(a, b) / norm(a) / norm(b)\n","print('Косинус угла между a и b:', cos_angle)\n","print('Сам угол:', np.arccos(cos_angle))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Косинус угла между a и b: 0.8000362836474323\n","Сам угол: 0.6434406336093618\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"awviVQOxuWbc"},"source":["Более подробно о том, как вычислять скалярное произведение в `NumPy`, \n","см. [документацию](http://docs.scipy.org/doc/numpy/reference/routines.linalg.html#matrix-and-vector-products)."]}]}